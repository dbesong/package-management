CICD tools installation


Maven

# install Java openJDK 11+ as a pre-requisit for maven to run.
sudo hostnamectl set-hostname maven
sudo su - ec2-user
cd /opt
sudo yum install wget nano tree unzip git-all -y
sudo yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y
java -version
git --version


#2. Download, extract and Install Maven
#Step1) Download the Maven Software
sudo wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip
sudo unzip apache-maven-3.9.6-bin.zip
sudo rm -rf apache-maven-3.9.6-bin.zip
sudo mv apache-maven-3.9.6/ maven

[ec2-user@maven maven]$ pwd
/opt/maven
  Maven home = M2_HOME   
  Maven home: /opt/maven
  MHD = /opt/maven [ M2_HOME ]:

export M2_HOME=/opt/maven
export PATH=$PATH:$M2_HOME/bin

sudo vi ~/.bash_profile
source ~/.bash_profile
MHD = /opt/maven 
The MHD is where the maven software is extracted.
   wget url  
   unzip  maven.zip  



Requirements:
1. project repository in the SCM [GitHub / GitLab]
   https://github.com/Landmark-Technologies/maven-standalone-application
2. We need a server with java & maven installed and configured   
3. Create a project directory in the maven build server
    mkdir java-projects   
4. Clone the codes from github into the project directory 
   git clone https://github.com/Landmark-Technologies/maven-standalone-application



[ec2-user@maven jp]$ ls maven-standalone-application/
pom.xml  src



in opt directory you will find maven 
create a directory called JP in opt.
In JP clone the code from GitHub and name it to a few words e.g mwa
cd into mwa and it is in mwa that you run the mvn commands
make sure the directories have permissions that allows for actions especially the JP directory.







Tomcat


Create ec2 redhat instance
create security group with port 8080 and attach to the instance
install java OpenJDK 1.8+


sudo hostnamectl set-hostname tomcat
sudo su - ec2-user
cd /opt
sudo yum install git wget -y unzip zip nano tree
sudo yum install java-1.8.0-openjdk-devel -y


sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.91/bin/apache-tomcat-9.0.91.zip
sudo unzip apache-tomcat-9.0.91.zip
sudo rm -rf apache-tomcat-9.0.91.zip
sudo mv apache-tomcat-9.0.91 tomcat9

sudo chmod 777 -R /opt/tomcat9
sudo chown ec2-user -R /opt/tomcat9
sh /opt/tomcat9/bin/startup.sh



change tomcat default port from 8080 to 8088
vi into server.xml and change ports to 8088 and restart tomcat
vi /opt/tomcat9/conf/server.xml


create tomcat users with access roles in the tomcat-users.xml file

vi /opt/tomcat9/conf/tomcat-users.xml

<user username="landmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>
<user username="simon" password="admin123" roles="admin-gui"/>


require manager gui to have access to tomcat from browser





configure external access by vi into context.xml and commenting the 127 valve.

vi /opt/tomcat9/webapps/manager/META-INF/context.xml comment the 127 valve save and exit



copy war file from maven server to tomcat server 

while in mwa scp -i testing36 target/tesla.war ec2-user@3.80.237.150:/opt/tomcat9/webapps/
make sure key is saved in a file created
to protect key chmod 400 key name


vi /opt/tomcat9/webapps/app/jsps/home.jsp for hot fixes



SonarQube



Installation of sonarqube:
  https://docs.sonarqube.org/latest/requirements/requirements/
  https://www.sonarqube.org/downloads/
https://github.com/LandmakTechnology/package-management/tree/master/soarQube-Installation
publicIP = 100.26.230.233
ssh -i "key36.pem" ec2-user@100.26.230.233

Installation of sonarqube:

# set hostname for the sonarqube server
sudo hostnamectl set-hostname sonar 

# Grand sudo access to sonar user
sudo echo "sonar ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/sonar

sudo useradd sonar
sudo passwd sonar
sudo su - sonar

#Enable password authentication

sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
sudo service sshd restart

cd /opt
sudo yum install unzip wget git vim -y
sudo yum install java-11-openjdk-devel -y


sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
sudo unzip sonarqube-7.8.zip
sudo rm -rf sonarqube-7.8.zip
sudo mv sonarqube-7.8 sonarqube

sudo chown -R sonar:sonar /opt/sonarqube/
sudo chmod -R 775 /opt/sonarqube/

sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start
sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status     

access sonarqube on the browser


In SonarQube, the bin directory host the linuxx86-64 directory which host the sonar.sh file. This file is used to start stop, restart or reload SonarQube e.g
while in linuxx86-64 run sh sonar.sh start to start SonarQube

The config directory host the sonar.properties file in which we update the port for SonarQube i.e from 9000 to what ever port number.

Then go to the POM.xml file in maven and in the properties section, update it with the SonarQube server ip and SonarQube login and password information.





Nexus

#!/bin/bash
sudo hostnamectl set-hostname nexus
sudo useradd nexus
sudo echo "nexus ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/nexus
sudo su - nexus
cd /opt

sudo yum install wget git nano unzip -y
sudo yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y
sudo wget http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz
sudo tar -zxvf nexus-3.15.2-01-unix.tar.gz
sudo mv /opt/nexus-3.15.2-01 /opt/nexus
sudo rm -rf nexus-3.15.2-01-unix.tar.gz

sudo chown -R nexus:nexus /opt/nexus
sudo chown -R nexus:nexus /opt/sonatype-work
sudo chmod -R 775 /opt/nexus
sudo chmod -R 775 /opt/sonatype-work


echo run_as_user="nexus" > /opt/nexus/bin/nexus.rc
sudo ln -s /opt/nexus/bin/nexus /etc/init.d/nexus
sudo systemctl enable nexus
sudo systemctl start nexus
sudo systemctl status nexus
echo "end of nexus installation"


In the nexus windows, create two repositories (one for releases and one for snapshots). Copy these two repositories to pom.xml file at the distribution management tag. Replace them with the repositories existing there. 

If you are building maven SonarQube with no Jenkins, go to the settings.xml file located in maven/conf/settings.xml directories and under the server tag, copy a server snippet and update with the nexus server access credentials.

If you are building pipeline with with Jenkins, go to /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.7/conf/settings.xml and under the server tag, copy a snippet and update with the server access credential details






Jenkins


#!/bin/bash
sudo timedatectl set-timezone Canada/Mountain
sudo hostnamectl set-hostname jenkins
sudo yum install wget tree vim git nano unzip -y
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade -y
# Add required dependencies for the jenkins package
sudo yum install java-11-openjdk -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
echo "echo of jenkins installation"
sudo su - ec2-user



in Jenkins, add maven by going to tools and scrolling down to maven. Select the maven version --> maven3.9.7 same version as listed just below.
save and quit. 

Then go to build steps and in maven select the maven3.9.7 that pops up. then in goals, type clean package. do same for the next build step and put sonar:sonar s goal. do same for next build step and put deploy as goal


Do not forget to add your gitgub repository and if private configure credentials.

http://3.80.18.169:8080/    Jenkins url



important directories found in jenkins home directory (/var/lib/jenkins
jobs, tools, workspace, logs, secrets, users,credentials.xml, updates, usercontent, config.xml


general areas
discard old builds, this project is parameterized, disable project



plugins: blue ocean, deploy to container,deploy to weblogic, jacoco plugin, maven integration, Safe Restart, next build number,ssh agent,email externsion template, sonarqube scanner, audit trail plugin,job import plugin, schedule builds, artifactory plugin, cloud foundry, build name setter



Nature of application:
We support critical applications for a FinTech/e-commerce CLIENTS 
DevOps/JENKINS is all about automation   
7Cs:
  CD,t---> Continuous Development [Git/GitHub/IDEs /GitBranch/gitTag 

  CI ---> Continuous Integration [Git/GitHub/Jenkins/maven/sonarqube/nexus] 
              [Build and Release Engineering]

  CD --> Continuous Delivery [build=packages/artifacts-->testing/UAT--manualApproval--- prod]
  
  CD --> Continuous Deployment [build=packages/artifacts-->testing/UAT--auto--- prod]
  
  CM --> Continuous Monitoring
            https://www.tesla.com/en_ca/powerwall  
            https://www.tesla.com/en_ca/modelx

   CS --> Continuous security
   CT --> Continuous Testing 


Tesla Client:
   java web applications    
1. We have created and shared the project GitHub repo  with developers 
      https://github.com/LandmakTechnology/maven-web-application 

Ticket002:
  Create an automation ci/cd job using Jenkins and other associated tools 
  for a FinTech Java based web application.    
solution:
1. connect to your jenkins server online 
   jenkins_url = http://54.237.55.112:8080/
   username    = classs36   
   password    = admin123   
2. create a ci/cd freestyle job for the client-tesla   

3. configure Jenkins Git Integration
   Ensure that Git plugins/Software is installed in the Jenkins server   
   sudo yum install git -y

    public project repo: 
   https://github.com/LandmakTechnology/maven-web-application
    private project repo: 
   https://github.com/LandmakTechnology/maven-web-app

        userName: legah2045   
        password: Admin@123  
   PERSONAL Access token: -----------
4. Jenkins maven Integration 
      Jenkins-Dashboard--manage Jenkins ---Tools and configure --maven   

4. Jenkins sonarQube Integration   mvn sonar:sonar :
----------------------------------------------  
----------------------------------------------  
NB: Your SonarQube server must be running 
    sudo su - sonar 
      sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status
      sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start 
      curl -v 34.213.64.100:9000 

    1. Edit pom.xml propertiesTAG with SonarQube server URL and login Credentials 
       in the Property TAG  
       http://172.31.23.193:9000/
       18.117.135.248:9000
         username: admin 
         password: admin 

      <Property>

2. Open required ports in Jenkins server to allow traffic from jenkins
   port 9000 should be open in the firewall/security group
  or Install and configure JaCoCo plugin in Jenkins UI:

5. Jenkins Nexus Integration;  mvn deploy:
=======================================
1. create, configure and setup a redhat server with nexus installed   
   sudo systemctl start nexus

2. Create artifactories repos in nexus 
   NEXUSserverIP:portNumber  
   18.189.7.116:8081/
   http://18.189.7.116:8081/repository/tesla-wp-release/
   http://18.189.7.116:8081/repository/tesla-wp-snapshots/

3. modify 'distributionManagement' tag with nexus repos details  in  pom.xml
        vi pom.xml
  <distributionManagement>
      <repository>
        <id>nexus</id>
        <name>Landmark Technologies Releases Nexus Repository</name>
        <url>http://3.137.166.218:8081/repository/tesla-releases/</url>
      </repository>
      
      <snapshotRepository>
        <id>nexus</id>
        <name>Landmark Technologies Snapshot Nexus Repository </name>
        <url>http://3.137.166.218:8081/repository/tesla-snapshots/</url>
      </snapshotRepository>
      
  </distributionManagement>

4. modify conf/setting.xml in JENKINS-server with nexus login credentials  
vi /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.6/conf/settings.xml


            <server>
                <id>nexus</id>
                <username>admin</username>
                <password>admin123</password>
            </server>

  [INFO] Working dir: /var/lib/jenkins/workspace/tesla-webapp/target/sonar



4b. Open required ports[8081/8089] in the Nexus server to allow traffic from jenkins server
    in order to perform codeQuality analysis

5. deploy to tomcat via JENKINS-TOMCAT INTEGRATION:
===================================================
 5a - create, configure and setup a redhat server with tomcat installed  
   1. INSTALL 'Deploy to container' Plugin on Jenkins UI
   This plugin allows you to deploy a war to a container after a successful build. 
   server address = http://3.144.85.2:8088/

In the configuration in jenkins do the following
target/*war
then tomcat server url with credentials to access

  ensure

5b-  ADD A TOMCAT USER in /tomcat9/conf/tomcat-users.xml 
   sudo vi /opt/tomcat9/conf/tomcat-users.xml
<user username="myLandmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>
<user username="landmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>

   http://54.152.168.210:8088/tesla/

 5c- Open required ports[8080] in tomcat server to allow traffic from jenkins server




























Playbook to create ansible and push public ssh key to slave nodes.

# ansible <group/host Name> -m ping -u <userName> --private-key=~/devops.pem
# ansible-playbook -b ansible-createuser.yml -u <userName> --private-key=~/devops.pem
- hosts: all
  tasks:
  - name: Create Ansible User
    user:
      name: ansible
      create_home: true
      shell: /bin/bash
      comment: "Ansible Management Account"
      expires: -1
      password: "{{ 'DevOps@2020' | password_hash('sha512','A512') }}"
  - name: Deploy Local User SSH Key
    authorized_key:
      user: ansible
      state: present
      manage_dir: true
      key: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"
  - name: Setup Sudo Access for Ansible User
    copy:
      dest: /etc/sudoers.d/ansible
      content: 'ansible ALL=(ALL) NOPASSWD: ALL' 
      validate: /usr/sbin/visudo -cf %s
  -  name: Disable Password Authentication
     lineinfile:
        dest=/etc/ssh/sshd_config
        regexp='^PasswordAuthentication'
        line="PasswordAuthentication no"
        state=present
        backup=yes
     notify:
       - restart ssh
  handlers:
  - name: restart ssh
    service:
      name=sshd
      state=restarted







Ansible Installation
Ansible is designed to run on Unix/Linux systems, therefore windows systems aren’t supported for the control node.

Ansible is python based and therefore the control node and the managed nodes need to have python2 or python3 installed on them.

Ansible can be installed in three ways: . Using yum or apt . Using pip . Using compile file https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html

Installing Ansible on Ubuntu
$ sudo adduser ansible
$ echo "ansible ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ansible
$ sudo su - ansible
$ sudo apt-add-repository ppa:ansible/ansible
$ sudo apt install ansible -y

Ansible installation on REDHAT EC2
$sudo useradd ansible
$sudo hostname ansible
$echo "ansible ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ansible
$sudo su - ansible # Enable PassowrdLogin and assign password to ansible user
$ sudo yum install python3 -y
$ sudo alternatives --set python /usr/bin/python3
$ sudo yum -y install python3-pip -y
$ pip3 install ansible --user





Docker

Ticket001: Install and setup docker in ubuntu
Install Docker on an Ubuntu server  
Check installation from Docker official documentation = docker.io  
docker-install.sh     
!#/bin/sh    
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo usermod -aG ubuntu docker  


ticket001: Install and setup docker in ubuntu  
###########################
#!/bin/bash
sudo hostnamectl set-hostname docker
sudo apt update -y
sudo apt install docker.io -y
sudo service docker start
sudo docker info
sudo usermod -aG docker ubuntu
sudo su - ubuntu    
sudo docker ps 
